rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserDoc(userId) {
      return request.auth.uid == userId;
    }
    
    function isDriver(driverId) {
      return isAuthenticated() && request.auth.uid == driverId;
    }
    
    function isRideParticipant(rideData) {
      return isAuthenticated() && (
        request.auth.uid == rideData.driverId || 
        request.auth.uid == rideData.riderId
      );
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasValidFields(requiredFields) {
      return request.resource.data.keys().hasAll(requiredFields);
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isUserDoc(userId);
    }

    // Drivers collection rules
    match /drivers/{driverId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(driverId);
      allow update: if isOwner(driverId);
      allow delete: if false;

      // Saved riders subcollection
      match /savedRiders/{riderId} {
        allow read, write: if isDriver(driverId);
      }
    }

    // Riders collection rules
    match /riders/{riderId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(riderId);
      allow update: if isOwner(riderId);
      allow delete: if false;
    }

    // Scheduled rides collection rules
    match /scheduledRides/{rideId} {
      function isParticipant() {
        return isAuthenticated() && (
          resource.data.driverId == request.auth.uid || 
          resource.data.riderId == request.auth.uid
        );
      }

      function hasValidScheduleFields() {
        let required = ['driverId', 'riderId', 'pickupTime', 'pickupLocation', 'dropoffLocation', 'status'];
        return hasValidFields(required);
      }

      allow read: if isAuthenticated() && (
        resource.data.driverId == request.auth.uid || 
        resource.data.riderId == request.auth.uid
      );
      
      allow create: if isAuthenticated() 
        && hasValidScheduleFields()
        && (
          request.resource.data.driverId == request.auth.uid || 
          request.resource.data.riderId == request.auth.uid
        );
      
      allow update: if isParticipant()
        && (resource.data.status != 'cancelled' || request.resource.data.status == 'cancelled')
        && (
          resource.data.driverId == request.resource.data.driverId &&
          resource.data.riderId == request.resource.data.riderId
        );
      
      allow delete: if isParticipant() && resource.data.status == 'cancelled';
    }

    // Rides collection rules
    match /rides/{rideId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isRideParticipant(resource.data);
      allow delete: if false;
    }

    // Locations collection rules
    match /locations/{locationId} {
      allow read: if true; // Public read access
      allow write: if false; // Admin-only writes
    }

    // Messages collection rules
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.recipientId == request.auth.uid
      );
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      allow update, delete: if false; // Messages cannot be modified or deleted
    }

    // Chats collection rules
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        resource.data.driverId == request.auth.uid || 
        resource.data.riderId == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.driverId == request.auth.uid || 
        resource.data.riderId == request.auth.uid
      );
      allow delete: if false;

      // Messages in chat
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.driverId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.riderId == request.auth.uid
        );
        allow create: if isAuthenticated() && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.driverId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.riderId == request.auth.uid
        );
      }
    }

    // Time slots collection rules
    match /timeSlots/{slotId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
  }
}