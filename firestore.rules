rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isRider() {
      return isSignedIn() && exists(/databases/$(database)/documents/riders/$(request.auth.uid));
    }
    
    function isDriver() {
      return isSignedIn() && exists(/databases/$(database)/documents/drivers/$(request.auth.uid));
    }
    
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    // User rules
    match /users/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Rider rules
    match /riders/{riderId} {
      allow read: if isSignedIn() && (request.auth.uid == riderId || isDriver() || isAdmin());
      allow write: if request.auth.uid == riderId || isAdmin();
    }

    // Driver rules
    match /drivers/{driverId} {
      allow read: if true;
      allow create: if true;
      allow update: if isSignedIn() && request.auth.uid == driverId;
      allow delete: if false;
    }

    // Rides rules
    match /rides/{rideId} {
      allow read: if true;
      allow create: if true;
      allow update: if isSignedIn() && (
        isDriver() || 
        isAdmin() || 
        request.auth.uid == resource.data.riderId
      );
      allow delete: if isAdmin();
    }

    // Saved riders rules
    match /saved_riders/{id} {
      allow read, write: if isSignedIn() && (
        request.auth.uid == resource.data.driverId || 
        isAdmin()
      );
    }

    // Driver Schedules rules
    match /drivers/{driverId}/schedules/{scheduleId} {
      allow read: if isSignedIn() && (
        request.auth.uid == driverId || 
        isAdmin()
      );
      allow write: if isSignedIn() && (
        request.auth.uid == driverId || 
        isAdmin()
      );
    }

    // Driver Settings rules
    match /driverSettings/{driverId} {
      allow read: if isSignedIn() && (
        request.auth.uid == driverId || 
        isAdmin()
      );
      allow write: if isSignedIn() && (
        request.auth.uid == driverId || 
        isAdmin()
      );
    }

    // Saved Riders rules
    match /savedRiders/{savedRiderId} {
      allow read: if isSignedIn() && (
        isAdmin() ||
        resource.data.driverId == request.auth.uid ||
        resource.data.riderId == request.auth.uid ||
        isDriver()  // Allow all drivers to read saved riders
      );
      allow create: if isSignedIn() && (
        request.resource.data.driverId == request.auth.uid ||
        isAdmin()
      );
      allow update, delete: if isSignedIn() && (
        resource.data.driverId == request.auth.uid ||
        isAdmin()
      );
    }

    // Chat rules
    match /chats/{chatId} {
      allow read: if isSignedIn() && (
        resource.data.riderId == request.auth.uid || 
        resource.data.driverId == request.auth.uid
      );
      allow create: if isSignedIn() && (
        request.resource.data.riderId == request.auth.uid || 
        request.resource.data.driverId == request.auth.uid
      );
      allow update: if isSignedIn() && (
        resource.data.riderId == request.auth.uid || 
        resource.data.driverId == request.auth.uid
      );
    }

    // Messages rules
    match /messages/{messageId} {
      allow read: if isSignedIn() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.receiverId == request.auth.uid
      );
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
    }

    // Connections rules
    match /connections/{connectionId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.driverId || request.auth.uid == resource.data.riderId);
      
      // Only riders can create connection requests
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.riderId && 
        request.resource.data.status == 'pending';
      
      // Only drivers can update to accept/reject, and only their own connections
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.driverId && 
        resource.data.status == 'pending' &&
        (request.resource.data.status == 'accepted' || request.resource.data.status == 'rejected');
      
      allow delete: if false;
    }

    // Notifications rules
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}