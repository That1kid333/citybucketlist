rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isDriver(driverId) {
      return isAuthenticated() && request.auth.uid == driverId;
    }
    
    function isRideParticipant(rideData) {
      return isAuthenticated() && (
        request.auth.uid == rideData.driverId || 
        request.auth.uid == rideData.riderId
      );
    }

    // Time slots collection rules
    match /timeSlots/{timeSlotId} {
      allow read: if true;
      allow create, update, delete: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // Allow anyone to create a ride request
    match /rides/{rideId} {
      allow create: if true;
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if false;
    }

    // Drivers collection rules
    match /drivers/{driverId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isDriver(driverId) || 
                     (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['available', 'lastActive', 'location', 'photoURL']));
      allow delete: if false;
    }

    // Messages collection rules
    match /messages/{messageId} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update, delete: if false;
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.recipientId ||
        request.auth.uid == resource.data.senderId
      );
      allow update: if isAuthenticated() && 
                     request.auth.uid == resource.data.recipientId &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']);
      allow delete: if false;
    }
  }
}